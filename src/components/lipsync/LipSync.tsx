import React, { useEffect, useRef, useCallback } from 'react';

interface WordInfo {
  word: string;
  startTime: string;
  endTime: string;
}

interface LipSyncProps {
  transcriptionData: {
    transcript: string;
    isFinal: boolean;
    words?: WordInfo[];
  } | null;
}

const LIPSINC_INTERVAL_MS = 100; // Intervalƒ± sabit olaraq t…ôyin edirik

const LipSync: React.FC<LipSyncProps> = ({ transcriptionData }) => {
  const simpleCharQueueRef = useRef<string[]>([]); // G…ôl…ôn simvollar √º√ß√ºn n√∂vb…ô
  const processedCharQueueRef = useRef<string[]>([]); // ƒ∞≈ül…ônmi≈ü simvollar √º√ß√ºn n√∂vb…ô
  const animationIntervalRef = useRef<NodeJS.Timeout | null>(null);

  const clearAnimationInterval = useCallback(() => {
    if (animationIntervalRef.current) {
      clearInterval(animationIntervalRef.current);
      animationIntervalRef.current = null;
      console.log('Animasiya intervalƒ± t…ômizl…ôndi.');
    }
  }, []);

  // METOD 2: N√∂vb…ôd…ôki simvollarƒ± emal ed…ôn v…ô animasiyanƒ± idar…ô ed…ôn funksiya
  const processQueuedCharacters = useCallback(() => {
    clearAnimationInterval(); // Potensial √ßoxsaylƒ± intervallarƒ±n qar≈üƒ±sƒ±nƒ± almaq √º√ß√ºn …ôvv…ôlc…ô t…ômizl…ôyirik

    if (simpleCharQueueRef.current.length === 0) {
      console.log("Animasiya √º√ß√ºn 'simpleCharQueueRef' bo≈üdur. Ba≈üladƒ±lmƒ±r.");
      return;
    }

    console.log('Simvol emalƒ± animasiyasƒ± ba≈üladƒ±lƒ±r...');
    animationIntervalRef.current = setInterval(() => {
      if (simpleCharQueueRef.current.length > 0) {
        const charToProcess = simpleCharQueueRef.current.shift(); 
        if (charToProcess) {
          processedCharQueueRef.current.push(charToProcess); 
          console.log(
            `üëÑ [Animasiya] Simvol k√∂√ß√ºr√ºld√º: '${charToProcess}'`, 
            {
              qalanAktivQueue: [...simpleCharQueueRef.current],
              qalanAktivQueueSize: simpleCharQueueRef.current.length,
              islenmisQueue: [...processedCharQueueRef.current],
              islenmisQueueSize: processedCharQueueRef.current.length
            }
          );
        }
      } else {
        console.log("üèÅ 'simpleCharQueueRef' bo≈üaldƒ±, animasiya dayandƒ±rƒ±lƒ±r.");
        clearAnimationInterval();
      }
    }, LIPSINC_INTERVAL_MS);
  }, [clearAnimationInterval]);

  // METOD 1: Yeni transkript m…ôlumatƒ±nƒ± q…ôbul ed…ôn v…ô simpleCharQueueRef-…ô …ôlav…ô ed…ôn funksiya
  const ingestTranscriptData = useCallback((data: LipSyncProps['transcriptionData']) => {
    if (data && data.transcript) {
      const newChars = data.transcript.split('');
      newChars.forEach(char => {
        simpleCharQueueRef.current.push(char);
      });
      console.log("üëÑ [N√∂vb…ô G√ºnc…ôll…ôndi] 'simpleCharQueueRef' m√∂vcud simvollar:", [...simpleCharQueueRef.current]);
      
      // ∆èg…ôr animasiya intervalƒ± aktiv deyils…ô v…ô n√∂vb…ôd…ô simvol varsa, animasiyanƒ± ba≈ülat
      if (simpleCharQueueRef.current.length > 0) {
        processQueuedCharacters();
      }
    } else if (!data) {
      // Transkript datasƒ± null g…ôl…ôrs…ô
      console.log('Transkript datasƒ± yoxdur. H…ôr iki n√∂vb…ô t…ômizl…ônir v…ô animasiya dayandƒ±rƒ±lƒ±r.');
      simpleCharQueueRef.current = [];
      processedCharQueueRef.current = [];
      clearAnimationInterval();
    }
  }, [processQueuedCharacters, clearAnimationInterval]); // processQueuedCharacters v…ô clearAnimationInterval dependensiyalara …ôlav…ô edildi

  useEffect(() => {
    console.log('LipSync t…ôr…ôfind…ôn alƒ±nan transcriptionData:', transcriptionData);
    ingestTranscriptData(transcriptionData); // Birinci metodu √ßaƒüƒ±rƒ±rƒ±q

    // Komponent unmount olduqda intervalƒ± t…ômizl…ô
    return () => {
      clearAnimationInterval();
    };
  }, [transcriptionData, ingestTranscriptData, clearAnimationInterval]);

  return null; 
};

export default LipSync;

